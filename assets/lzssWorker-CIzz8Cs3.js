function d(t,s){if(s.data.length!==t.byteLength*2)throw new Error("Data length does not match image data length");for(let e=0;e<t.byteLength;e+=2){const n=t.getUint16(e),o=((n&31744)>>10)*8,f=((n&992)>>5)*8,i=(n&31)*8;s.data[e*2]=o,s.data[e*2+1]=f,s.data[e*2+2]=i,s.data[e*2+3]=n&32768?0:255}}function p(t){const s=new DataView(new ArrayBuffer(t.length/2));for(let e=0;e<t.length;e+=4){const n=t[e],o=t[e+1],f=t[e+2],i=t[e+3];s.setUint16(e/2,n/8<<10|o/8<<5|f/8|(i?0:32768))}return s}const g=4096,w=2,B=18;function A(t,s){const e=new DataView(new ArrayBuffer(s));let n=t.byteLength,o=0,f=0,i=g-B;const a=new DataView(new ArrayBuffer(g+B-1));for(let u=0;u<g-B;u++)a.setInt8(u,32);let c=0;for(;;){if(c=Math.floor(c/2),c<256){if(--n<0)break;c=t.getUint8(f++)|65280}if(c&1){if(--n<0)break;const u=t.getUint8(f++);e.setUint8(o++,u),a.setUint8(i++,u),i&=g-1}else{if(--n<0)break;let u=t.getUint8(f++);if(--n<0)break;let r=t.getUint8(f++);u|=(r&240)<<4,r=(r&15)+w+1;for(let y=0;y<r;y++){const l=a.getUint8(u+y&g-1);e.setUint8(o++,l),a.setUint8(i++,l),i&=g-1}}}return e}function C(t){const s=new DataView(new ArrayBuffer(t.byteLength*2)),e=new DataView(new ArrayBuffer(g+B-1));for(let r=0;r<g-B;r++)e.setUint8(r,32);let n=0,o=0,f=g-B,i=0,a=0,c=0;for(c=o++;n<t.byteLength;){a===8&&(s.setUint8(c,i),c=o++,i=0,a=0);let r=0,y=0;for(let l=0;l<g-B;l++){let h=0;for(;h<B&&n+h<t.byteLength&&e.getUint8(l+h&g-1)===t.getUint8(n+h)&&(h++,!(h>=B)););h>r&&(r=h,y=l)}if(r>w&&L(f,y,r)){const l=r-w-1,h=y>>8&15;s.setUint8(o++,y&255),s.setUint8(o++,h<<4|l);for(let U=0;U<r;U++){const b=t.getUint8(n+U);e.setUint8(f,b),f++,f>=g&&(f=0)}n+=r,a++}else{const l=t.getUint8(n++);s.setUint8(o++,l),i|=1<<a,a++,e.setUint8(f,l),f++,f>=g&&(f=0)}}a>0&&s.setUint8(c,i);const u=s.buffer.slice(0,o);return new DataView(u)}function L(t,s,e){for(let n=0;n<e;n++)if((s+n)%g===t)return!1;return!0}onmessage=async t=>{if(t.data.type==="compress"){const s=p(t.data.uIntArray),e=C(s);postMessage({id:t.data.id,type:"compressRes",dataBuffer:e.buffer})}if(t.data.type==="decompress"){const{compressedDataView:s,outputSize:e,width:n,height:o}=t.data,f=A(s,e),i=new OffscreenCanvas(n,o);i.width=n,i.height=o;const a=i.getContext("2d"),c=a?.getImageData(0,0,i.width,i.height);if(!c||(d(f,c),!a))return;postMessage({id:t.data.id,type:"decompressRes",imageData:c})}};
