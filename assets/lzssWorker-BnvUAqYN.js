function A(t,s){if(s.data.length!==t.byteLength*2)throw new Error("Data length does not match image data length");for(let e=0;e<t.byteLength;e+=2){const o=t.getUint16(e),r=((o&31744)>>10)*8,a=((o&992)>>5)*8,i=(o&31)*8;s.data[e*2]=r,s.data[e*2+1]=a,s.data[e*2+2]=i,s.data[e*2+3]=o&32768?0:255}}function C(t){const s=new DataView(new ArrayBuffer(t.length/2));for(let e=0;e<t.length;e+=4){const o=t[e],r=t[e+1],a=t[e+2],i=t[e+3];s.setUint16(e/2,o/8<<10|r/8<<5|a/8|(i?0:32768))}return s}const h=4096,p=2,y=18;function M(t,s){const e=new DataView(new ArrayBuffer(s));let o=t.byteLength,r=0,a=0,i=h-y;const g=new DataView(new ArrayBuffer(h+y-1));for(let f=0;f<h-y;f++)g.setInt8(f,32);let n=0;for(;;){if(n=Math.floor(n/2),n<256){if(--o<0)break;n=t.getUint8(a++)|65280}if(n&1){if(--o<0)break;const f=t.getUint8(a++);e.setUint8(r++,f),g.setUint8(i++,f),i&=h-1}else{if(--o<0)break;let f=t.getUint8(a++);if(--o<0)break;let l=t.getUint8(a++);f|=(l&240)<<4,l=(l&15)+p;for(let w=0;w<=l;w++){const c=g.getUint8(f+w&h-1);e.setUint8(r++,c),g.setUint8(i++,c),i&=h-1}}}return e}function P(t){var w;const s=t.byteLength,e=new DataView(new ArrayBuffer(s*2)),o=new DataView(new ArrayBuffer(h+y-1));for(let c=0;c<h-y;c++)o.setUint8(c,32);let r=0,a=0,i=0,g=0;a=r++;let n=0,f=h-y;const l=new Map;for(;n<s;){i===8&&(e.setUint8(a,g),a=r++,g=0,i=0);let c=0,d=0;if(n+p<s){const U=Math.min(y,s-n),L=t.getUint8(n)<<8|t.getUint8(n+1),b=l.get(L)||[];for(const u of b){let B=0;for(;B<U&&o.getUint8((u+B)%h)===t.getUint8(n+B);)B++;if(B>c&&(c=B,d=u,c>=U))break}if(n+1<s){const u=t.getUint8(n)<<8|t.getUint8(n+1);l.has(u)||l.set(u,[]),(w=l.get(u))==null||w.push(f),l.get(u).length>100&&l.get(u).shift()}}if(c<=p){const U=t.getUint8(n++);e.setUint8(r++,U),g|=1<<i,o.setUint8(f,U),f=(f+1)%h}else{e.setUint8(r++,d&255);const U=c-p-1,L=d>>8&15;e.setUint8(r++,L<<4|U);for(let b=0;b<c;b++){const u=t.getUint8(n+b);o.setUint8(f,u),f=(f+1)%h}n+=c}i++}return i>0&&e.setUint8(a,g),new DataView(e.buffer.slice(0,r))}onmessage=async t=>{if(t.data.type==="compress"){const s=C(t.data.uIntArray),e=P(s);postMessage({id:t.data.id,type:"compressRes",dataBuffer:e.buffer})}if(t.data.type==="decompress"){const{compressedDataView:s,outputSize:e,width:o,height:r}=t.data,a=M(s,e),i=new OffscreenCanvas(o,r);i.width=o,i.height=r;const g=i.getContext("2d"),n=g==null?void 0:g.getImageData(0,0,i.width,i.height);if(!n||(A(a,n),!g))return;postMessage({id:t.data.id,type:"decompressRes",imageData:n})}};
